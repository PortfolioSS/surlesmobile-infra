AWSTemplateFormatVersion: '2010-09-09'
Description: ECS Fargate service for .NET API (reads RDS + Cognito settings)
Parameters:
  VpcId: { Type: String }
  Subnets: { Type: CommaDelimitedList }
  EcrRepoUri: { Type: String }
  ImageTag: { Type: String, Default: latest }
  ContainerPort: { Type: Number, Default: 8080 }
  DbConnSecretArn: { Type: String }
  CognitoIssuer: { Type: String }
  CognitoAudience: { Type: String }
Resources:
  Cluster: { Type: AWS::ECS::Cluster, Properties: { ClusterName: surlesmobile } }
  TaskExecRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement: [{ Effect: Allow, Principal: { Service: ecs-tasks.amazonaws.com }, Action: sts:AssumeRole }]
      ManagedPolicyArns: [ arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy ]
  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement: [{ Effect: Allow, Principal: { Service: ecs-tasks.amazonaws.com }, Action: sts:AssumeRole }]
      Policies:
        - PolicyName: ReadSecrets
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: secretsmanager:GetSecretValue
                Resource: !Ref DbConnSecretArn
  TaskDef:
    Type: AWS::ECS::TaskDefinition
    Properties:
      RequiresCompatibilities: [ FARGATE ]
      Cpu: '256'
      Memory: '512'
      NetworkMode: awsvpc
      ExecutionRoleArn: !GetAtt TaskExecRole.Arn
      TaskRoleArn: !GetAtt TaskRole.Arn
      ContainerDefinitions:
        - Name: api
          Image: !Sub '${EcrRepoUri}:${ImageTag}'
          PortMappings: [ { ContainerPort: !Ref ContainerPort } ]
          Environment:
            - Name: ASPNETCORE_URLS
              Value: http://+:8080
            - Name: COGNITO__ISSUER
              Value: !Ref CognitoIssuer
            - Name: COGNITO__AUDIENCE
              Value: !Ref CognitoAudience
          Secrets:
            - Name: ConnectionStrings__Default
              ValueFrom: !Ref DbConnSecretArn
  SG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ALB -> ECS
      VpcId: !Ref VpcId
  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      Subnets: !Ref Subnets
      SecurityGroups: [ !Ref SG ]
  TG:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 80
      Protocol: HTTP
      TargetType: ip
      VpcId: !Ref VpcId
      HealthCheckPath: /health
  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ALB
      Port: 80
      Protocol: HTTP
      DefaultActions: [{ Type: forward, TargetGroupArn: !Ref TG }]
  Service:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref Cluster
      LaunchType: FARGATE
      DesiredCount: 1
      TaskDefinition: !Ref TaskDef
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups: [ !Ref SG ]
          Subnets: !Ref Subnets
      LoadBalancers:
        - ContainerName: api
          ContainerPort: !Ref ContainerPort
          TargetGroupArn: !Ref TG
Outputs:
  ApiUrl: { Value: !Sub 'http://${ALB.DNSName}' }
